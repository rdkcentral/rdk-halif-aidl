#[======================================================================[.rst:
CompileAidl
------------------------

Generate source code from AIDL file(s).

Introduction
^^^^^^^^^^^^

Use this module to generate source code from aidl files during build time.

For example:

.. code-block:: cmake

  include(CompileAidl)
  compile_aidl(dir1/example.aidl
	AIDL_BIN bin/aidl
	AIDL_FLAGS --min_sdk_version=33 --structured
	LANG rust
    INCLUDE_DIRECTORY dir2/include
    TARGET_DIRECTORY dir3
    )

At build time, the aidl file ``dir1/example.aidl`` will be processed by the aidl
compiler in ``bin/aidl`` with options ``--min_sdk_version=33 --structured`` passed
to the aidl compiler. During source generating, the aidl compiler will look at the
``dir2/include`` as additional import path. Rust source file will be genreated at
``dir3/rust``.

Module Functions
^^^^^^^^^^^^^^^^
#]======================================================================]

#[======================================================================[.rst:
.. command:: compile_aidl

  .. code-block:: cmake

    compile_aidl(<source1> [source2 ...]
      [AIDL_BIN <aidl-path>]
      [AIDL_FLAGS <flags>...]
      [LANG <language>]
      [INCLUDE_DIRECTORY <dirs>...]
      [TARGET_DIRECTORY <dir>]
      )

  The ``compile_aild`` function is used to generate source files based on the
  supplied aidl files and the `LANG` option during build phrase. By default C++
  source files and headers are generated if ``LANG`` is not specified.

  This function accepts the following named parameters:

  ``AIDL_BIN``
    Path of the aidl compiler, default using one provied by $PATH
  ``AIDL_FLAGS``
    List of additional options passed to the aidl compiler, override the default options:
    ``--min_sdk_version=33 --structured --stability=vintf``
  ``LANG``
    Language of souce files that are generated by the aidl compiler, default is cpp
  ``INCLUDE_DIRECTORY``
    Directories as additioanl search path for import statement in aidl files
  ``TARGET_DIRECTORY``
    Base of ouput directory for the generated files, the source files will be output in
    ``dir/<lang>``, and for cpp source, the corresponding header files are stored in
    ``dir/h``. Default is the same level as calling CMakeList.txt
#]======================================================================]
function(compile_aidl)
	set(oneValueArgs TARGET_DIRECTORY AIDL_BIN LANG)
	set(multiValueArgs INCLUDE_DIRECTORY AIDL_FLAGS)

	cmake_parse_arguments(arg "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

	set(aidl_src ${arg_UNPARSED_ARGUMENTS})

	if (DEFINED arg_AIDL_BIN)
		get_filename_component(AIDL_BIN ${arg_AIDL_BIN} ABSOLUTE)
	else()
		find_program(AIDL_BIN "aidl")
	endif()

	if (NOT EXISTS ${AIDL_BIN} OR IS_DIRECTORY ${AIDL_BIN})
		message(FATAL_ERROR "`aidl` not found")
	endif()
	message(STATUS "Using aidl compiler: ${AIDL_BIN}")

	set(LANG "cpp")
	if (DEFINED arg_LANG)
		string(TOLOWER ${arg_LANG} LANG)
	endif()

	foreach(dir IN ITEMS ${arg_INCLUDE_DIRECTORY})
		list(APPEND INCLUDE_FLAGS "-I${dir}")
	endforeach()

	set(AIDL_FLAGS
		--min_sdk_version=33
		--structured
		--stability=vintf
	)
	if (DEFINED arg_AIDL_FLAGS)
		set(AIDL_FLAGS ${arg_AIDL_FLAGS})
	endif()
	list(APPEND AIDL_FLAGS "--lang=${LANG}")

	set(TARGET_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
	if (DEFINED arg_TARGET_DIRECTORY)
		set(TARGET_DIRECTORY ${arg_TARGET_DIRECTORY})
	endif()

	set(OUT_FLAGS "-o ${TARGET_DIRECTORY}/${LANG}")
	if ((${LANG} STREQUAL "cpp") OR (${LANG} STREQUAL "ndk"))
		list(APPEND OUT_FLAGS "-h ${TARGET_DIRECTORY}/h")
	endif()

	execute_process(
		COMMAND ${AIDL_BIN} ${AIDL_FLAGS} ${INCLUDE_FLAGS} ${OUT_FLAGS} ${aidl_src}
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		OUTPUT_VARIABLE OUTPUT
		ERROR_VARIABLE ERROR
		RESULT_VARIABLE RESULT
	)

	if(RESULT EQUAL 0)
		message(STATUS "Command succeeded with output:\n${OUTPUT}")
	else()
		message(FATAL_ERROR "Command failed with error:\n${ERROR}")
	endif()
endfunction()
